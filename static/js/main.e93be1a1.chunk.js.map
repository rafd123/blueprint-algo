{"version":3,"sources":["App.module.scss","modules/blueprint.js","components/Blueprint/index.js","App.js","index.js","components/Blueprint/style.module.scss"],"names":["module","exports","CellValueEnum","Object","freeze","BARE_FLOOR","PAINTED_FLOOR","WALL","fillFloor","startCellRowIndex","startCellColumnIndex","shouldPaint","blueprint","startingCell","getCellValue","RangeError","desiredCellValue","stack","length","cell","pop","canFill","rowIndex","columnIndex","pushEligibleSurroundingCells","topLeft","topCenter","topRight","middleLeft","middleRight","bottomLeft","bottomCenter","bottomRight","topLeftCanPaint","topCenterCanPaint","topRightCanPaint","middleLeftCanPaint","middleRightCanPaint","bottomLeftCanPaint","bottomCenterCanPaint","bottomRightCanPaint","push","cellValue","row","getCellValueStyle","style","paintedFloor","wall","bareFloor","dragImage","Image","rowCount","columCount","useState","buildModeEnabled","setBuildModeEnabled","Array","fill","setBlueprint","toggleFloorPaint","newBlueprint","paintFloor","map","slice","washFloor","setCellValue","i","onDragStart","e","dataTransfer","setDragImage","onDragOver","preventDefault","onCellClick","newCellValue","toggleCellWallValue","className","container","controlContainer","Button","clearButton","onClick","modeGroup","ButtonGroup","modeButton","variant","color","icon","faHammer","size","fixedWidth","faFillDrip","table","buildMode","paintMode","key","draggable","Blueprint","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.e93be1a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1BpOi\"};","export const CellValueEnum = Object.freeze({\n  BARE_FLOOR: \"BARE_FLOOR\",\n  PAINTED_FLOOR: \"PAINTED_FLOOR\",\n  WALL: \"WALL\",\n});\n\nexport const paintFloor = ({\n  startCellRowIndex,\n  startCellColumnIndex,\n  blueprint,\n}) =>\n  fillFloor({\n    startCellRowIndex,\n    startCellColumnIndex,\n    shouldPaint: true,\n    blueprint,\n  });\n\nexport const washFloor = ({\n  startCellRowIndex,\n  startCellColumnIndex,\n  blueprint,\n}) =>\n  fillFloor({\n    startCellRowIndex,\n    startCellColumnIndex,\n    shouldPaint: false,\n    blueprint,\n  });\n\nconst fillFloor = ({\n  startCellRowIndex,\n  startCellColumnIndex,\n  shouldPaint,\n  blueprint,\n}) => {\n  const startingCell = [startCellRowIndex, startCellColumnIndex];\n  const startingCellValue = getCellValue(startingCell, blueprint);\n\n  switch (startingCellValue) {\n    case CellValueEnum.BARE_FLOOR:\n    case CellValueEnum.PAINTED_FLOOR:\n      break;\n    case CellValueEnum.WALL:\n      throw RangeError(\n        \"Invalid starting cell. The starting cell contains a wall.\"\n      );\n    default:\n      throw RangeError(\n        \"Invalid starting cell. The starting cell is not within the blueprint.\"\n      );\n  }\n\n  const desiredCellValue = shouldPaint\n    ? CellValueEnum.PAINTED_FLOOR\n    : CellValueEnum.BARE_FLOOR;\n\n  const stack = [startingCell];\n  while (stack.length) {\n    const cell = stack.pop();\n\n    if (!canFill(cell, desiredCellValue, blueprint)) {\n      continue;\n    }\n\n    const [rowIndex, columnIndex] = cell;\n    blueprint[rowIndex][columnIndex] = desiredCellValue;\n\n    pushEligibleSurroundingCells(\n      stack,\n      rowIndex,\n      columnIndex,\n      desiredCellValue,\n      blueprint\n    );\n  }\n\n  return blueprint;\n};\n\nconst pushEligibleSurroundingCells = (\n  stack,\n  rowIndex,\n  columnIndex,\n  desiredCellValue,\n  blueprint\n) => {\n  var topLeft = [rowIndex - 1, columnIndex - 1];\n  var topCenter = [rowIndex - 1, columnIndex];\n  var topRight = [rowIndex - 1, columnIndex + 1];\n\n  var middleLeft = [rowIndex, columnIndex - 1];\n  var middleRight = [rowIndex, columnIndex + 1];\n\n  var bottomLeft = [rowIndex + 1, columnIndex - 1];\n  var bottomCenter = [rowIndex + 1, columnIndex];\n  var bottomRight = [rowIndex + 1, columnIndex + 1];\n\n  var topLeftCanPaint = canFill(topLeft, desiredCellValue, blueprint);\n  var topCenterCanPaint = canFill(topCenter, desiredCellValue, blueprint);\n  var topRightCanPaint = canFill(topRight, desiredCellValue, blueprint);\n\n  var middleLeftCanPaint = canFill(middleLeft, desiredCellValue, blueprint);\n  var middleRightCanPaint = canFill(middleRight, desiredCellValue, blueprint);\n\n  var bottomLeftCanPaint = canFill(bottomLeft, desiredCellValue, blueprint);\n  var bottomCenterCanPaint = canFill(bottomCenter, desiredCellValue, blueprint);\n  var bottomRightCanPaint = canFill(bottomRight, desiredCellValue, blueprint);\n\n  if (topLeftCanPaint && (topCenterCanPaint || middleLeftCanPaint)) {\n    stack.push(topLeft);\n  }\n\n  if (topCenterCanPaint) {\n    stack.push(topCenter);\n  }\n\n  if (topRightCanPaint && (topCenterCanPaint || middleRightCanPaint)) {\n    stack.push(topRight);\n  }\n\n  if (middleLeftCanPaint) {\n    stack.push(middleLeft);\n  }\n\n  if (middleRightCanPaint) {\n    stack.push(middleRight);\n  }\n\n  if (bottomLeftCanPaint && (bottomCenterCanPaint || middleLeftCanPaint)) {\n    stack.push(bottomLeft);\n  }\n\n  if (bottomCenterCanPaint) {\n    stack.push(bottomCenter);\n  }\n\n  if (bottomRightCanPaint && (bottomCenterCanPaint || middleRightCanPaint)) {\n    stack.push(bottomRight);\n  }\n};\n\nconst canFill = (cell, desiredCellValue, blueprint) => {\n  const cellValue = getCellValue(cell, blueprint);\n  return (\n    cellValue &&\n    cellValue !== CellValueEnum.WALL &&\n    cellValue !== desiredCellValue\n  );\n};\n\nconst getCellValue = (cell, blueprint) => {\n  const [rowIndex, columnIndex] = cell;\n  if (rowIndex < 0 || columnIndex < 0 || rowIndex > blueprint.length - 1) {\n    return null;\n  }\n\n  const row = blueprint[rowIndex];\n\n  return columnIndex < row.length ? row[columnIndex] : null;\n};\n","import React, { useState } from \"react\";\nimport { Button, ButtonGroup } from \"@material-ui/core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFillDrip, faHammer } from \"@fortawesome/free-solid-svg-icons\";\nimport { CellValueEnum, paintFloor, washFloor } from \"../../modules/blueprint\";\nimport style from \"./style.module.scss\";\n\nconst getCellValueStyle = (cellValue) => {\n  switch (cellValue) {\n    case CellValueEnum.PAINTED_FLOOR:\n      return style.paintedFloor;\n    case CellValueEnum.WALL:\n      return style.wall;\n    default:\n      return style.bareFloor;\n  }\n};\n\nconst dragImage = new Image(0, 0);\n\nexport default ({ rowCount = 20, columCount = 20 }) => {\n  const [buildModeEnabled, setBuildModeEnabled] = useState(true);\n  const [blueprint, setBlueprint] = useState(\n    Array(rowCount).fill(Array(columCount).fill(CellValueEnum.BARE_FLOOR))\n  );\n\n  const toggleCellWallValue = ({ rowIndex, columnIndex }) => {\n    const cellValue = blueprint[rowIndex][columnIndex];\n    const newCellValue =\n      cellValue === CellValueEnum.BARE_FLOOR ||\n      cellValue === CellValueEnum.PAINTED_FLOOR\n        ? CellValueEnum.WALL\n        : CellValueEnum.BARE_FLOOR;\n\n    setCellValue({ rowIndex, columnIndex, cellValue: newCellValue });\n  };\n\n  const toggleFloorPaint = ({ rowIndex, columnIndex }) => {\n    const cellValue = blueprint[rowIndex][columnIndex];\n    if (cellValue === CellValueEnum.WALL) {\n      return;\n    }\n\n    const newBlueprint =\n      cellValue === CellValueEnum.BARE_FLOOR\n        ? paintFloor({\n            startCellRowIndex: rowIndex,\n            startCellColumnIndex: columnIndex,\n            blueprint: blueprint.map((row) => row.slice(0)),\n          })\n        : washFloor({\n            startCellRowIndex: rowIndex,\n            startCellColumnIndex: columnIndex,\n            blueprint: blueprint.map((row) => row.slice(0)),\n          });\n\n    setBlueprint(newBlueprint);\n  };\n\n  const setCellValue = ({ rowIndex, columnIndex, cellValue }) => {\n    if (blueprint[rowIndex][columnIndex] === cellValue) {\n      return;\n    }\n\n    const newBlueprint = blueprint.map((row, i) =>\n      i === rowIndex ? row.slice(0) : row\n    );\n\n    newBlueprint[rowIndex][columnIndex] = cellValue;\n    setBlueprint(newBlueprint);\n  };\n\n  const clearPaint = () =>\n    setBlueprint(\n      blueprint.map((row) =>\n        row.map((cellValue) =>\n          cellValue === CellValueEnum.WALL\n            ? CellValueEnum.WALL\n            : CellValueEnum.BARE_FLOOR\n        )\n      )\n    );\n\n  const clearWalls = () =>\n    setBlueprint(\n      blueprint.map((row) =>\n        row.map((cellValue) =>\n          cellValue === CellValueEnum.WALL\n            ? CellValueEnum.BARE_FLOOR\n            : cellValue\n        )\n      )\n    );\n\n  const onDragStart = (e) =>\n    buildModeEnabled && e.dataTransfer.setDragImage(dragImage, 0, 0);\n\n  const onDragOver = ({ rowIndex, columnIndex }) => (e) => {\n    if (buildModeEnabled) {\n      e.preventDefault();\n      setCellValue({ rowIndex, columnIndex, cellValue: CellValueEnum.WALL });\n    }\n  };\n\n  const onCellClick = ({ rowIndex, columnIndex }) => () =>\n    buildModeEnabled\n      ? toggleCellWallValue({ rowIndex, columnIndex })\n      : toggleFloorPaint({ rowIndex, columnIndex });\n\n  return (\n    <div className={style.container}>\n      <div className={style.controlContainer}>\n        <Button className={style.clearButton} onClick={() => clearWalls()}>\n          Clear Walls\n        </Button>\n\n        <div className={style.modeGroup}>\n          <ButtonGroup>\n            <Button\n              className={style.modeButton}\n              variant=\"contained\"\n              color={buildModeEnabled ? \"primary\" : \"default\"}\n              onClick={() => setBuildModeEnabled(true)}\n            >\n              <FontAwesomeIcon icon={faHammer} size=\"lg\" fixedWidth={true} />\n            </Button>\n\n            <Button\n              className={style.modeButton}\n              variant=\"contained\"\n              color={!buildModeEnabled ? \"primary\" : \"default\"}\n              onClick={() => setBuildModeEnabled(false)}\n            >\n              <FontAwesomeIcon icon={faFillDrip} size=\"lg\" fixedWidth={true} />\n            </Button>\n          </ButtonGroup>\n        </div>\n\n        <Button className={style.clearButton} onClick={() => clearPaint()}>\n          Clear Paint\n        </Button>\n      </div>\n\n      <table\n        className={`${style.table} ${\n          buildModeEnabled ? style.buildMode : style.paintMode\n        }`}\n      >\n        <tbody>\n          {blueprint.map((row, rowIndex) => (\n            <tr key={rowIndex}>\n              {row.map((cellValue, columnIndex) => (\n                <td\n                  key={`${rowIndex},${columnIndex}`}\n                  className={getCellValueStyle(cellValue)}\n                  draggable={buildModeEnabled}\n                  onDragStart={onDragStart}\n                  onDragOver={onDragOver({ rowIndex, columnIndex })}\n                  onClick={onCellClick({ rowIndex, columnIndex })}\n                ></td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from \"react\";\nimport Blueprint from \"./components/Blueprint\";\nimport style from \"./App.module.scss\";\n\nexport default () => {\n  return (\n    <div className={style.container}>\n      <Blueprint />\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"typeface-roboto\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__nqXc4\",\"controlContainer\":\"style_controlContainer___nFA4\",\"modeGroup\":\"style_modeGroup__Ojz6a\",\"table\":\"style_table__8r4MD\",\"bareFloor\":\"style_bareFloor__TtUXW\",\"paintedFloor\":\"style_paintedFloor__11HJ8\",\"wall\":\"style_wall__2O9N5\",\"buildMode\":\"style_buildMode__1ojxp\",\"paintMode\":\"style_paintMode__3cEC7\"};"],"sourceRoot":""}